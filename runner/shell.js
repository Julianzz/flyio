// Generated by CoffeeScript 1.6.2
(function() {
  var Runner, exports, nodefs, pm, utils, vfs;

  nodefs = require("vfs-nodefs-adapter");

  pm = require("../process_manager");

  utils = require("../utils");

  vfs = require("../vfs");

  exports = module.exports;

  Runner = (function() {
    Runner.prototype.name = "shell";

    function Runner(vfs, options, callback) {
      this.vfs = vfs;
      this.fs = nodefs(vfs);
      this.uid = options.uid;
      this.command = options.command;
      this.args = options.args || [];
      this.url = options.url;
      this.extra = options.extra;
      this.encoding = options.encoding;
      this.runOptions = {};
      if (options.cwd) {
        this.runOptions.cwd = options.cwd;
      }
      if (this.encoding) {
        this.runOptions.stdoutEncoding = this.encoding;
        this.runOptions.stderrEncoding = this.encoding;
      }
      if (options.env) {
        this.runOptions.env = options.env;
      }
      this.runOptions.env = this.runOptions.env || {};
      this.runOptions.env.IP = (vfs.env && vfs.env.OPENSHIFT_DIY_IP) || "0.0.0.0";
      this.eventEmitter = options.eventEmitter;
      this.eventName = options.eventName;
      this.pid = 0;
      callback(null, this);
    }

    Runner.prototype.exec = function(onStart, onExit) {
      var self;

      self = this;
      return this.createChild(function(err, child) {
        var out;

        if (err) {
          return onStart(err);
        }
        self.child = child;
        self.pid = child.pid;
        onStart(null, child.pid);
        out = "";
        err = "";
        child.on("exit", function(code) {
          onExit(code, out, err);
          return self.pid = 0;
        });
        child.stdout.on("data", function(data) {
          return out += data.toString("utf8");
        });
        return child.stderr.on("data", function(data) {
          return err += data.toString("utf8");
        });
      });
    };

    Runner.prototype.createChild = function(callback) {
      this.runOptions.args = this.args;
      return this.vfs.spawn(this.command, this.runOptions, function(err, meta) {
        return callback(err, meta && meta.process);
      });
    };

    Runner.prototype.spawn = function(callback) {
      var self;

      self = this;
      return this.createChild(function(err, child) {
        if (err) {
          return callback(err);
        }
        self.child = child;
        self.pid = child.pid;
        self.attachEvents(child);
        return callback(null, child.pid);
      });
    };

    Runner.prototype.kill = function(signal) {
      return this.child && this.child.kill(signal);
    };

    Runner.prototype.describe = function() {
      return {
        command: [this.command].concat(this.args).join(" "),
        type: this.name
      };
    };

    Runner.prototype.attachEvents = function(child) {
      var emit, pid, self, sender,
        _this = this;

      self = this;
      pid = child.pid;
      emit = function(msg) {
        return _this.eventEmitter.emit(_this.eventName, msg);
      };
      sender = function(stream) {
        return function(data) {
          return emit({
            "type": self.name + "-data",
            "pid": pid,
            "stream": stream,
            "data": data,
            "extra": self.extra
          });
        };
      };
      child.stdout.on("data", sender("stdout"));
      child.stderr.on("data", sender("stderr"));
      child.on("exit", function(code) {
        self.pid = 0;
        return emit({
          "type": self.name + "-exit",
          "pid": pid,
          "code": code || 0,
          "extra": self.extra
        });
      });
      return process.nextTick(function() {
        return emit({
          "type": self.name + "-start",
          "pid": pid,
          "extra": self.extra
        });
      });
    };

    return Runner;

  })();

  exports.factory = function(vfs) {
    return function(args, eventEmitter, eventName, callback) {
      var options;

      options = {};
      utils.extend(options, args);
      options.eventEmitter = eventEmitter;
      options.eventName = eventName;
      options.args = args.args;
      return new Runner(vfs, options, callback);
    };
  };

  exports.Runner = Runner;

  pm.addRunner("shell", exports.factory(vfs));

}).call(this);
