// Generated by CoffeeScript 1.6.2
(function() {
  var FileList, Os, Path, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Os = require("os");

  Path = require("path");

  _ = require("underscore");

  FileList = (function() {
    function FileList() {
      this.env = {
        findCmd: "find",
        perlCmd: "perl",
        platform: Os.platform(),
        basePath: "",
        workspaceId: ""
      };
    }

    FileList.prototype.setEnv = function(newEnv) {
      var self,
        _this = this;

      self = this;
      return _.each(this.env, function(key, value) {
        if (__indexOf.call(newEnv, key) >= 0) {
          return _this.env[key] = newEnv[key];
        }
      });
    };

    FileList.prototype.exec = function(options, vfs, onData, onExit) {
      var args, path;

      path = options.path;
      if (!options.path) {
        return onExit(1, "Invalid path");
      }
      options.uri = path;
      options.path = Path.normalize(this.env.basePath + (path != null ? path : "/" + {
        path: ""
      }));
      if (Path.relative(this.env.basePath, options.path).indexOf("../") === 0) {
        return onExit(1, "Invalid path");
      }
      args = this.assembleCommand(options);
      return vfs.spawn(args.command, {
        args: args,
        cwd: options.path,
        stdoutEncoding: "utf8",
        stderrEncoding: "utf8"
      }, function(err, meta) {
        var stderr;

        if (err || !meta.process) {
          return onExit(1, err);
        }
        stderr = "";
        meta.process.stdout.on("data", function(data) {
          return onData(data);
        });
        meta.process.stderr.on("data", function(data) {
          return stderr += data;
        });
        return meta.process.on("exit", function(code) {
          return onExit(code, stderr);
        });
      });
    };

    FileList.prototype.assembleCommand = function(options) {
      var args, excludeAbsoluteDirectories, excludeDirectories, excludeExtensions;

      excludeExtensions = ["\\.gz", "\\.bzr", "\\.cdv", "\\.dep", "\\.dot", "\\.nib", "\\.plst", "_darcs", "_sgbak", "autom4te\\.cache", "cover_db", "_build", "\\.tmp", "\\.pyc", "\\.class"];
      excludeDirectories = ["\\.c9revisions", "\\.architect", "\\.sourcemint", "\\.git", "\\.hg", "\\.pc", "\\.svn", "blib", "CVS", "RCS", "SCCS", "\\.DS_Store"];
      excludeAbsoluteDirectories = ["/proc", "/sys", "/mnt"];
      args = ["-n", "10", this.env.findCmd];
      args.command = "nice";
      if (this.env.platform === "darwin") {
        args.push("-E");
      } else {
        args.push("-O3");
      }
      args.push("-P", ".", "-type", "f", "-mount", "-a");
      if (!options.showHiddenFiles) {
        args.push("(", "!", "-regex", ".*\/\\..*", "-or", "-name", ".htaccess", ")");
      }
      if (!!options.maxdepth) {
        args.push("-maxdepth", options.maxdepth);
      }
      _.each(excludeExtensions, function(pattern) {
        return args.push("(", "!", "-regex", ".*\\/" + pattern + "$", ")");
      });
      _.each(excludeDirectories, function(pattern) {
        return args.push("(", "!", "-regex", ".*\\/" + pattern + "\\/.*", ")");
      });
      _.each(excludeAbsoluteDirectories, function(dir) {
        return args.push("(", "!", "-path", dir, ")");
      });
      if (this.env.platform !== "darwin") {
        args.push("-regextype", "posix-extended", "-print");
      }
      return args;
    };

    return FileList;

  })();

  module.exports = FileList;

}).call(this);
